/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rpg;

import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import rpg.project.Five;
import rpg.project.Four;
import rpg.project.One;
import rpg.project.Six;
import rpg.project.Three;
import rpg.project.Two;

/**
 *
 * @author Rafee-M
 */
public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame1
     */
    private static playerAttributes p1 = new playerAttributes();
    int areaFontSize = 18;
    private int storyCount = 1; //Story Level
    static int i = 1; //Story State
    static int n = 0; //Story Stream
    private String saveString;
    
    public MainScreen() {
        
        initComponents();
        this.setResizable(false); // Make the frame not resizable
    }
    
    public MainScreen(int x, int y) {
        
        initComponents();
        this.setLocation(x, y);
        this.setResizable(false); // Make the frame not resizable
    }
    
    //constructor overloading. Used when game state is loaded from settings
    public MainScreen(String name, int health, int storyCount, int stream, int state, int fontSize, int x, int y) { 
        
        p1.setName(name);
        p1.setHealth(health);
        this.storyCount = storyCount;
        this.n = stream;
        this.i = state;
        this.areaFontSize = fontSize;
        this.setLocation(x, y);
        initComponents();
        choiceConfirmActionPerformed(null); //// Invoke the method once when the app starts
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        MainSettingsButton = new javax.swing.JButton();
        ToolbarHealth = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        MainStoryText = new javax.swing.JTextArea();
        Radio2 = new javax.swing.JRadioButton();
        Radio1 = new javax.swing.JRadioButton();
        choiceConfirm = new javax.swing.JButton();
        DeathMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        MainSettingsButton.setBackground(new java.awt.Color(51, 51, 51));
        MainSettingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settings-icon-14951.png"))); // NOI18N
        MainSettingsButton.setBorderPainted(false);
        MainSettingsButton.setContentAreaFilled(false);
        MainSettingsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        MainSettingsButton.setName("SettingsButton"); // NOI18N
        MainSettingsButton.setSelected(true);
        MainSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainSettingsButtonActionPerformed(evt);
            }
        });

        ToolbarHealth.setEditable(false);
        ToolbarHealth.setBackground(new java.awt.Color(51, 51, 51));
        ToolbarHealth.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ToolbarHealth.setForeground(new java.awt.Color(255, 255, 255));
        ToolbarHealth.setText("Chapter: " + String.valueOf(storyCount) + " | " + "Health: " + (String.valueOf(p1.getHealth())));
        ToolbarHealth.setFocusable(false);
        ToolbarHealth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToolbarHealthActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(51, 51, 51));
        jTextField2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(255, 255, 255));
        jTextField2.setText("The Stolen");
        jTextField2.setBorder(null);
        jTextField2.setFocusable(false);
        jTextField2.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ToolbarHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(279, 279, 279)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(ToolbarHealth, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(MainSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainStoryText.setBackground(new java.awt.Color(255, 255, 255));
        MainStoryText.setColumns(20);
        MainStoryText.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MainStoryText.setLineWrap(true);
        MainStoryText.setRows(5);
        MainStoryText.setWrapStyleWord(true);
        MainStoryText.setAutoscrolls(false);
        MainStoryText.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        MainStoryText.setFocusTraversalPolicyProvider(true);
        MainStoryText.setFocusable(false);
        //Custom code for making scrollbar stay at the top
        MainStoryText.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                adjustScrollBar();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                adjustScrollBar();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                adjustScrollBar();
            }

            private void adjustScrollBar() {
                // For example, scroll to the top
                SwingUtilities.invokeLater(() -> {
                    MainStoryText.setCaretPosition(0);
                });
            }
        });
        jScrollPane1.setViewportView(MainStoryText);

        buttonGroup1.add(Radio2);
        Radio2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Radio2.setText("jRadioButton2");
        Radio2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Radio2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(Radio1);
        Radio1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Radio1.setText("jRadioButton1");
        Radio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Radio1ActionPerformed(evt);
            }
        });

        choiceConfirm.setBackground(new java.awt.Color(51, 51, 51));
        choiceConfirm.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        choiceConfirm.setForeground(new java.awt.Color(255, 255, 255));
        choiceConfirm.setText("Continue");
        choiceConfirm.setFocusPainted(false);
        choiceConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceConfirmActionPerformed(evt);
            }
        });

        DeathMessage.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        DeathMessage.setForeground(new java.awt.Color(255, 0, 0));
        DeathMessage.setVisible(false);
        DeathMessage.setText("YOU DIED!");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1081, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Radio1)
                            .addComponent(Radio2))
                        .addGap(462, 462, 462))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(DeathMessage)
                                .addGap(13, 13, 13))
                            .addComponent(choiceConfirm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(496, 496, 496))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Radio1)
                .addGap(18, 18, 18)
                .addComponent(Radio2)
                .addGap(18, 18, 18)
                .addComponent(DeathMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(choiceConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ToolbarHealthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToolbarHealthActionPerformed

    }//GEN-LAST:event_ToolbarHealthActionPerformed


    private void MainSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainSettingsButtonActionPerformed
        this.setVisible(false);
        SettingsPanel settings = new SettingsPanel(this.getX(), this.getY());
        settings.setVisible(true);
        settings.setMainScreen(this, 1);
        

    }//GEN-LAST:event_MainSettingsButtonActionPerformed

    private void choiceConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceConfirmActionPerformed

        saveString = ((getName() + "\t" + getHealth() + "\t" + getStoryCount() + "\t" + getStream() + "\t" + getState() + "\t" + getAreaFontSize())); //saves the progress of the game into a string
        //Resetting death message
        choiceConfirm.setText("Continue");
        DeathMessage.setVisible(false);
        ToolbarHealth.setText("Chapter: " + String.valueOf(storyCount) + " | " + "Health: " + (String.valueOf(p1.getHealth()))); //sets health on the top left of the screen
        //Actions that happen when continute is pressed

        //for Chapter 1
        if (storyCount == 1 && i != 5) { //(i != 5) stops from continuing when a choice is shown
            if (i == 8) {
                p1.setHealth(p1.getHealth() - 5);
            }
            
            MainStoryText.setText(a.getOnePart(i, p1.getName())); //sets the story text according to i and storyCount
            toggleRadio(false);

        } else if (storyCount == 2 && i != 1) {
            MainStoryText.setText(b.getTwoPart(i, p1.getName()));
            toggleRadio(false);
        } else if (storyCount == 3 && i != 1) {

            toggleRadio(false);
        } else if (storyCount == 4 && i != 1) {

            toggleRadio(false);
            MainStoryText.setText(d.getFourPart(i, p1.getName()));
        } else if (storyCount == 6 && i == 0) {
            
            //restart game after completion
            storyCount = 1;
            i = 1;
        }
        storyText();
        ToolbarHealth.setText("Chapter: " + String.valueOf(storyCount) + " | " + "Health: " + (String.valueOf(p1.getHealth()))); //sets health on the top left of the screen

    }//GEN-LAST:event_choiceConfirmActionPerformed

    One a = new One();
    Two b = new Two();
    Three c = new Three();
    Four d = new Four();
    Five e = new Five();
    Six f = new Six();
    private void Radio2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Radio2ActionPerformed
        if (storyCount == 1) {
            i = 8;
            //p1.setHealth(p1.getHealth()-5);

        }
        if (storyCount == 2) {
            i = 5;
        }

        if (storyCount == 3) {
            i = 4;
            n = 2; //stranger taken along
        }

        if (storyCount == 4) {
            if (n == 1) {
                i = 5; //4B exchange without stanger
            }

            if (n == 2) {
                i = 6; //4C exchange with stranger
            }

        }

    }//GEN-LAST:event_Radio2ActionPerformed

    private void Radio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Radio1ActionPerformed
        if (storyCount == 1) {
            i = 7;
        }

        if (storyCount == 2) {
            i = 4; //leads to death
        }
        if (storyCount == 3) {
            i = 3; //stranger left behind
            n = 1; //n is a story stream variable for determining which stream of content and path is being carried out
        }

        if (storyCount == 4) {
            if (n == 1) {
                i = 3; //4A doesn't exchange without stanger
            }

            if (n == 2) {
                i = 8; //4D doesn't exchange with stranger
            }

        }
    }//GEN-LAST:event_Radio1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    public void storyText() {

        //For Chapter 1
        if (storyCount == 1) {

            if (i == 5) {  // case 5 is for part 4. Fight with dogs
                toggleRadio(true);
                Radio1.setText(a.getOnePart(i, p1.getName())); //makes radio buttons visible and sets choice content
                Radio2.setText(a.getOnePart(i + 1, p1.getName()));
            } else if (i == 7 || i == 8) { //case 7 and case 8 have different story, but leads to case 9
                i = 9;
            } else {  //drives the main storyline of chapter 1
                toggleRadio(false);
                MainStoryText.setText(a.getOnePart(i, p1.getName()));
                i++;  //iterates through all the cases in One.java. It will stop once during (i == 5) and (i == 7) || (i == 8)
                if (i > 9) {  //when greater than 9, not more cases available in One.java
                    storyCount++; //moves on the chapter 2
                    i = 1; //resets 
                }
            }

        }

        //For chapter 2
        if (storyCount == 2) {
            if (i == 1) { //start of Chapter 2
                toggleRadio(true); //for choice for setting camp
                MainStoryText.setText(b.getTwoPart(i, p1.getName()));
                Radio1.setText(b.getTwoPart(i + 1, p1.getName())); //makes radio buttons visible and sets choice content
                Radio2.setText(b.getTwoPart(i + 2, p1.getName()));
            }
            if (i == 4) { //death choice for setting camp
                storyCount = 1;
                i = 1;
                choiceConfirm.setText("Restart");
                DeathMessage.setVisible(true);
            }
            if (i > 4 && i <= 6) { //goes through case 6 of Two.java
                MainStoryText.setText(b.getTwoPart(++i, p1.getName()));
            }
            if (i == 7) { //case 7 of Two.java doesnt get run and then moves on to Chapter 3
                storyCount++;
                i = 1;
            }

        }

        //Chapter 3
        if (storyCount == 3) {
            if (i == 1) {
                MainStoryText.setText(b.getTwoPart(7, p1.getName())); //Part 7 from Chapter 2 is printed 
                toggleRadio(true);
                Radio1.setText(c.getThreePart(i, p1.getName())); //makes radio buttons visible and sets choice content
                Radio2.setText(c.getThreePart(i + 1, p1.getName())); //choice for taking the stranger in your party.
            }
            if (i > 2) {
                MainStoryText.setText(c.getThreePart(i, p1.getName()));
                i = 1;
                storyCount++;
            }

        } //Chapter 4
        else if (storyCount == 4) {
            //printng the story outcome of each stream from Chapter 3 and showing their choices
            if (i == 1) {
                if (n == 1) {
                    MainStoryText.setText(c.getThreePart(5, p1.getName()));
                }
                if (n == 2) {
                    MainStoryText.setText(c.getThreePart(6, p1.getName()));
                }

                //choice for trading weapon
                toggleRadio(true);
                Radio1.setText(d.getFourPart(1, p1.getName()));
                Radio2.setText(d.getFourPart(2, p1.getName()));
            } else if (i == 3 || i == 6 || i == 8) { //Move on to 4A(2)
                i++;
            } //if 4A(2), 4B, 4C(2), 4D(2) done, move to Chapter 5
            else if (i == 4 || i == 5 || i == 7 || i == 9) {
                storyCount++; //i is not being reset as last i value of Chapter 4 directly links to stream of Chapter 5
            }
        }

        //Chapter 5
        if (storyCount == 5) {
            MainStoryText.setText(e.getFivePart(i, p1.getName()));
            storyCount++;
        } //Chapter 6
        else if (storyCount == 6) {
            MainStoryText.setText(f.getSixPart(i, p1.getName()));
            choiceConfirm.setText("Restart Game");
            i = 0;
        }

    }

    //toggles the radio buttons for choice input
    public void toggleRadio(boolean toggle) {

        boolean visible = toggle;

        Radio1.setVisible(visible);
        Radio2.setVisible(visible);
    }

    //sets player name from settings
    public void newName(String name) {
        p1.setName(name);
    }

    //gets new font size from settings
    public void newMainFont(int areaFontSize) {
        this.areaFontSize = areaFontSize; //so that this variable can be sent back to settings menu
        MainStoryText.setFont(new java.awt.Font("Segoe UI", 0, areaFontSize));
        MainStoryText.repaint();
        repaint();
    }

    //for save file
    public String getName() {
        return p1.getName();
    }

    public int getHealth() {
        return p1.getHealth();
    }

    public int getStoryCount() {
        return storyCount;
    }

    public int getStream() {
        return this.n;
    }
    
    public int getState(){
        return this.i;
    }

    public int getAreaFontSize() {
        return this.areaFontSize;
    }
    
    public String getSaveString(){
        return this.saveString; //called to retrive progress of game
    }
    
    //for loading
    @Override
    public void setName(String name) {
        p1.setName(name);
    }

    public void setHealth(int health) {
        p1.setHealth(health);
    }
    
    public void setStoryCount(int newStoryCount){
        storyCount = newStoryCount;
    }

    public void setStream(int newStream) {
        n = newStream;
        
    }
    
    public void getState(int newState){
        i = newState;
    }

    public void setAreaFontSize(int size) {
        this.areaFontSize = size;
    }
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DeathMessage;
    private javax.swing.JButton MainSettingsButton;
    private javax.swing.JTextArea MainStoryText;
    private javax.swing.JRadioButton Radio1;
    private javax.swing.JRadioButton Radio2;
    private javax.swing.JTextField ToolbarHealth;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton choiceConfirm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
